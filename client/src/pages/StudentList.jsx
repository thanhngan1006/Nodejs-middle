import React, { useState } from "react";
import {
  PlusIcon,
  EyeIcon,
  PencilIcon,
  TrashIcon,
  AcademicCapIcon, // Icon cho B·∫£ng ƒëi·ªÉm
} from "@heroicons/react/24/outline";
import { useStudents } from "../context/StudentContext"; // S·ª¨ D·ª§NG CONTEXT
import StudentFormModal from "./StudentFormModal";
import ConfirmationModal from "./ConfirmationModal";
import StudentViewModal from "./StudentViewModal";
import GradebookModal from "./GradebookModal"; // Import Modal B·∫£ng ƒëi·ªÉm

// Component ph·ª• StatusBadge (gi·ªØ nguy√™n)
const StatusBadge = ({ status }) => {
  let color = "";
  if (status === "Active") {
    color = "bg-green-100 text-green-800 border-green-300";
  } else if (status === "Inactive") {
    color = "bg-red-100 text-red-800 border-red-300";
  } else {
    // M·∫∑c ƒë·ªãnh cho "Graduated"
    color = "bg-yellow-100 text-yellow-800 border-yellow-300";
  }
  return (
    <span
      className={`inline-flex items-center px-3 py-1 text-xs font-semibold rounded-full border ${color}`}
    >
      {status}
    </span>
  );
};

const StudentList = () => {
  // L·∫•y state v√† h√†m x·ª≠ l√Ω t·ª´ Context (th√™m 'fetchStudents')
  const { students, deleteStudent, getStudentById, loading, fetchStudents } = useStudents();
  const [searchTerm, setSearchTerm] = useState("");
  // State cho c√°c modal
  const [isModalOpen, setIsModalOpen] = useState(false); // Modal Th√™m/S·ª≠a
  const [editingStudent, setEditingStudent] = useState(null);

  const [isConfirmOpen, setIsConfirmOpen] = useState(false); // Modal X√°c nh·∫≠n X√≥a
  const [studentToDelete, setStudentToDelete] = useState(null);

  const [isViewModalOpen, setIsViewModalOpen] = useState(false); // Modal Xem chi ti·∫øt
  const [studentToView, setStudentToView] = useState(null);

  const [isGradeModalOpen, setIsGradeModalOpen] = useState(false); // Modal B·∫£ng ƒëi·ªÉm
  const [studentForGrades, setStudentForGrades] = useState(null);


  // --- H√ÄM X·ª¨ L√ù UI V√Ä CRUD ---

  // M·ªü Modal Th√™m m·ªõi
  const handleAdd = () => {
    setEditingStudent(null);
    setIsModalOpen(true);
  };

  // M·ªü Modal S·ª≠a
  const handleEdit = (studentId) => {
    const student = getStudentById(studentId); // 'id' l√† '_id' ƒë√£ ƒë∆∞·ª£c map
    setEditingStudent(student);
    setIsModalOpen(true);
  };

  // M·ªü Modal X√°c nh·∫≠n X√≥a
  const handleDeleteConfirm = (studentId) => {
    const student = getStudentById(studentId);
    setStudentToDelete(student);
    setIsConfirmOpen(true);
  };

  // Th·ª±c hi·ªán X√≥a
  const handleDelete = () => {
    if (studentToDelete) {
      deleteStudent(studentToDelete.id); // 'id' l√† '_id'
    }
    setIsConfirmOpen(false);
    setStudentToDelete(null);
  };

  // M·ªü Modal Xem chi ti·∫øt
  const handleViewDetails = (student) => {
    setStudentToView(student);
    setIsViewModalOpen(true);
  };

  // M·ªü Modal B·∫£ng ƒëi·ªÉm
  const handleOpenGrades = (student) => {
    setStudentForGrades(student);
    setIsGradeModalOpen(true);
  };

  // ƒê√≥ng Modal B·∫£ng ƒëi·ªÉm (v√† l√†m m·ªõi danh s√°ch)
  const handleCloseGrades = () => {
    setIsGradeModalOpen(false);
    fetchStudents(); // T·∫£i l·∫°i danh s√°ch ƒë·ªÉ c·∫≠p nh·∫≠t GPA m·ªõi
  };

  // L·ªçc d·ªØ li·ªáu (d√πng camelCase)
  const filteredStudents = students.filter(
    (student) =>
      student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      student.studentId.includes(searchTerm) // T√¨m theo studentId
  );

  return (
    <div className="p-8 bg-gray-50 min-h-screen">
      {/* HEADER V√Ä BUTTON TH√äM M·ªöI */}
      <div className="flex justify-between items-center mb-6 border-b pb-4 bg-white p-4 rounded-xl shadow-sm">
        <h1 className="text-3xl font-bold text-gray-900">
          Danh s√°ch Sinh vi√™n üéì
        </h1>
        <button
          onClick={handleAdd}
          className="flex items-center bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-150 ease-in-out"
        >
          <PlusIcon className="h-5 w-5 mr-2" />
          Th√™m Sinh vi√™n
        </button>
      </div>

      {/* T√åM KI·∫æM */}
      <div className="mb-8 p-4 bg-white rounded-xl shadow-sm">
        <input
          type="text"
          placeholder="T√¨m ki·∫øm theo T√™n ho·∫∑c M√£ s·ªë sinh vi√™n..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="p-3 border border-gray-300 rounded-xl shadow-inner focus:ring-blue-500 focus:border-blue-500 w-full md:w-1/3 transition-all duration-200"
        />
      </div>

      {/* B·∫¢NG D·ªÆ LI·ªÜU */}
      <div className="shadow-2xl overflow-hidden border border-gray-200 rounded-xl">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-blue-50">
            <tr>
              {["H·ªç v√† T√™n", "M√£ SV / Chuy√™n ng√†nh", "GPA", "Tr·∫°ng th√°i"].map(
                (header) => (
                  <th
                    key={header}
                    className="px-6 py-3 text-left text-xs font-bold text-blue-800 uppercase tracking-wider"
                  >
                    {header}
                  </th>
                )
              )}
              <th className="px-6 py-3 text-right text-xs font-bold text-blue-800 uppercase tracking-wider">
                H√†nh ƒë·ªông
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-100">
            {/* X·ª≠ l√Ω loading */}
            {loading ? (
              <tr>
                <td colSpan="5" className="text-center py-10 text-gray-500">
                  ƒêang t·∫£i danh s√°ch sinh vi√™n...
                </td>
              </tr>
            ) : filteredStudents.length === 0 ? (
              // X·ª≠ l√Ω kh√¥ng c√≥ d·ªØ li·ªáu
              <tr>
                <td colSpan="5" className="text-center py-10 text-gray-500">
                  Kh√¥ng t√¨m th·∫•y sinh vi√™n n√†o.
                </td>
              </tr>
            ) : (
              // Hi·ªÉn th·ªã d·ªØ li·ªáu
              filteredStudents.map((student) => (
                <tr
                  key={student.id} // 'id' l√† '_id' ƒë√£ ƒë∆∞·ª£c map
                  className="hover:bg-blue-50 transition-colors duration-150"
                >
                  {/* T√™n & Email */}
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-semibold text-gray-900">
                      {student.name}
                    </div>
                    <div className="text-xs text-blue-600 mt-1">
                      {student.user?.email || "N/A"}
                    </div>
                  </td>

                  {/* M√£ SV / Chuy√™n ng√†nh */}
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-700 font-medium">
                      {student.studentId} {/* D√πng camelCase */}
                    </div>
                    <div className="text-xs text-gray-500">{student.major}</div>
                  </td>

                  {/* GPA */}
                  <td
                    className="px-6 py-4 whitespace-nowrap text-sm font-extrabold"
                    style={{
                      color:
                        student.gpa >= 3.5 ? "#10B981" // Xanh l√°
                          : student.gpa >= 2.5 ? "#3B82F6" // Xanh d∆∞∆°ng
                            : "#F59E0B", // V√†ng (D∆∞·ªõi 2.5)
                    }}
                  >
                    {student.gpa.toFixed(2)}
                  </td>

                  {/* Tr·∫°ng th√°i */}
                  <td className="px-6 py-4 whitespace-nowrap">
                    <StatusBadge status={student.status} />
                  </td>

                  {/* H√†nh ƒë·ªông */}
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex justify-end space-x-1">
                      {/* B·∫£ng ƒëi·ªÉm */}
                      <button
                        onClick={() => handleOpenGrades(student)}
                        className="text-green-600 hover:text-green-900 p-2 rounded-full hover:bg-green-100 transition-colors duration-150"
                        title="B·∫£ng ƒëi·ªÉm"
                      >
                        <AcademicCapIcon className="h-5 w-5" />
                      </button>
                      {/* Xem Chi ti·∫øt */}
                      <button
                        onClick={() => handleViewDetails(student)}
                        className="text-blue-600 hover:text-blue-900 p-2 rounded-full hover:bg-blue-100 transition-colors duration-150"
                        title="Xem chi ti·∫øt"
                      >
                        <EyeIcon className="h-5 w-5" />
                      </button>
                      {/* S·ª≠a */}
                      <button
                        onClick={() => handleEdit(student.id)}
                        className="text-yellow-600 hover:text-yellow-900 p-2 rounded-full hover:bg-yellow-100 transition-colors duration-150"
                        title="S·ª≠a"
                      >
                        <PencilIcon className="h-5 w-5" />
                      </button>
                      {/* X√≥a */}
                      <button
                        onClick={() => handleDeleteConfirm(student.id)}
                        className="text-red-600 hover:text-red-900 p-2 rounded-full hover:bg-red-100 transition-colors duration-150"
                        title="X√≥a"
                      >
                        <TrashIcon className="h-5 w-5" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* MODAL TH√äM/S·ª¨A */}
      <StudentFormModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        editingStudent={editingStudent}
      />

      {/* MODAL X√ÅC NH·∫¨N X√ìA */}
      <ConfirmationModal
        isOpen={isConfirmOpen}
        onClose={() => setIsConfirmOpen(false)}
        onConfirm={handleDelete}
        title="X√°c nh·∫≠n X√≥a Sinh vi√™n"
        message={
          studentToDelete
            ? `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a sinh vi√™n ${studentToDelete.name} (${studentToDelete.studentId}) kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.`
            : "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th·ª±c hi·ªán h√†nh ƒë·ªông n√†y kh√¥ng?"
        }
      />

      {/* MODAL XEM CHI TI·∫æT */}
      <StudentViewModal
        isOpen={isViewModalOpen}
        onClose={() => setIsViewModalOpen(false)}
        student={studentToView}
      />

      {/* MODAL B·∫¢NG ƒêI·ªÇM */}
      <GradebookModal
        isOpen={isGradeModalOpen}
        onClose={handleCloseGrades} // D√πng h√†m ƒë√≥ng c√≥ l√†m m·ªõi
        student={studentForGrades}
      />
    </div>
  );
};

export default StudentList;